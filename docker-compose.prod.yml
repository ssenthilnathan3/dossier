version: '3.8'

services:
  # Infrastructure
  redis:
    image: redis:7-alpine
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    networks:
      - dossier-network

  postgres:
    image: postgres:15-alpine
    restart: unless-stopped
    environment:
      POSTGRES_DB: dossier
      POSTGRES_USER: dossier
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256 --auth-local=scram-sha-256"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U dossier -d dossier"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    networks:
      - dossier-network

  qdrant:
    image: qdrant/qdrant:latest
    restart: unless-stopped
    ports:
      - "6333:6333"
    volumes:
      - qdrant_data:/qdrant/storage
      - ./config/qdrant.yaml:/qdrant/config/production.yaml:ro
    environment:
      QDRANT__SERVICE__HTTP_PORT: 6333
      QDRANT__LOG_LEVEL: INFO
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'
    networks:
      - dossier-network

  # Application Services
  webhook-handler:
    build:
      context: ./services/webhook-handler
      dockerfile: Dockerfile
      target: runtime
    restart: unless-stopped
    ports:
      - "3001:3001"
    environment:
      - PORT=3001
      - REDIS_URL=redis://redis:6379
      - WEBHOOK_SECRET=${WEBHOOK_SECRET}
      - NODE_ENV=production
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - GRACEFUL_SHUTDOWN_TIMEOUT=30000
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3001/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    networks:
      - dossier-network

  ingestion-service:
    build:
      context: ./services/ingestion-service
      dockerfile: Dockerfile
      target: runtime
    restart: unless-stopped
    ports:
      - "8001:8001"
    environment:
      - DATABASE_URL=postgresql://dossier:${POSTGRES_PASSWORD}@postgres:5432/dossier
      - REDIS_URL=redis://redis:6379
      - FRAPPE_URL=${FRAPPE_URL}
      - FRAPPE_API_KEY=${FRAPPE_API_KEY}
      - FRAPPE_API_SECRET=${FRAPPE_API_SECRET}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - BATCH_SIZE=${INGESTION_BATCH_SIZE:-50}
      - MAX_WORKERS=${INGESTION_MAX_WORKERS:-4}
      - GRACEFUL_SHUTDOWN_TIMEOUT=30
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8001/health', timeout=5)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    networks:
      - dossier-network

  embedding-service:
    build:
      context: ./services/embedding-service
      dockerfile: Dockerfile
      target: runtime
    restart: unless-stopped
    ports:
      - "8002:8002"
    environment:
      - QDRANT_URL=http://qdrant:6333
      - EMBEDDING_MODEL=${EMBEDDING_MODEL:-all-MiniLM-L6-v2}
      - BATCH_SIZE=${EMBEDDING_BATCH_SIZE:-32}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - MODEL_CACHE_DIR=/app/models
      - GRACEFUL_SHUTDOWN_TIMEOUT=30
    depends_on:
      qdrant:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8002/health', timeout=5)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s  # Longer start period for model loading
    volumes:
      - embedding_models:/app/models
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '2.0'
        reservations:
          memory: 1G
          cpus: '1.0'
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    networks:
      - dossier-network

  query-service:
    build:
      context: ./services/query-service
      dockerfile: Dockerfile
      target: runtime
    restart: unless-stopped
    ports:
      - "8003:8003"
    environment:
      - DATABASE_URL=postgresql://dossier:${POSTGRES_PASSWORD}@postgres:5432/dossier
      - QDRANT_URL=http://qdrant:6333
      - EMBEDDING_MODEL=${EMBEDDING_MODEL:-all-MiniLM-L6-v2}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - SEARCH_TOP_K=${SEARCH_TOP_K:-10}
      - GRACEFUL_SHUTDOWN_TIMEOUT=30
    depends_on:
      postgres:
        condition: service_healthy
      qdrant:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8003/health', timeout=5)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    networks:
      - dossier-network

  ollama:
    image: ollama/ollama:latest
    restart: unless-stopped
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    environment:
      - OLLAMA_HOST=0.0.0.0
      - OLLAMA_KEEP_ALIVE=${OLLAMA_KEEP_ALIVE:-5m}
      - OLLAMA_NUM_PARALLEL=${OLLAMA_NUM_PARALLEL:-1}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/tags"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 2G
          cpus: '1.0'
    networks:
      - dossier-network

  llm-service:
    build:
      context: ./services/llm-service
      dockerfile: Dockerfile
      target: runtime
    restart: unless-stopped
    ports:
      - "8004:8004"
    environment:
      - OLLAMA_URL=http://ollama:11434
      - DEFAULT_MODEL=${DEFAULT_MODEL:-llama3.2}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - RESPONSE_TIMEOUT=${LLM_RESPONSE_TIMEOUT:-120}
      - GRACEFUL_SHUTDOWN_TIMEOUT=30
    depends_on:
      ollama:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8004/health', timeout=5)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    networks:
      - dossier-network

  frontend:
    build:
      context: ./services/frontend
      dockerfile: Dockerfile
      target: runtime
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=${FRONTEND_API_URL:-http://localhost:8003}
      - REACT_APP_WS_URL=${FRONTEND_WS_URL:-ws://localhost:8004}
    depends_on:
      - query-service
      - llm-service
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.25'
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    networks:
      - dossier-network

volumes:
  redis_data:
    driver: local
  postgres_data:
    driver: local
  qdrant_data:
    driver: local
  ollama_data:
    driver: local
  embedding_models:
    driver: local

networks:
  dossier-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16