version: "3.8"

services:
  # Infrastructure
  redis:
    image: redis:7-alpine
    ports:
      - "6380:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 3s
      retries: 3

  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: dossier
      POSTGRES_USER: dossier
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-dossier123}
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U dossier"]
      interval: 30s
      timeout: 3s
      retries: 3

  qdrant:
    image: qdrant/qdrant:latest
    ports:
      - "6333:6333"
    volumes:
      - qdrant_data:/qdrant/storage
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/health"]
      interval: 30s
      timeout: 3s
      retries: 3

  # Application Services
  webhook-handler:
    build:
      context: ./services/webhook-handler
      dockerfile: Dockerfile
    ports:
      - "3001:3001"
    environment:
      - PORT=3001
      - REDIS_URL=redis://redis:6379
      - WEBHOOK_SECRET=${WEBHOOK_SECRET}
      - NODE_ENV=production
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped

  ingestion-service:
    build:
      context: ./services/ingestion-service
      dockerfile: Dockerfile
    ports:
      - "8001:8001"
    environment:
      - DATABASE_URL=postgresql://dossier:${POSTGRES_PASSWORD:-dossier123}@postgres:5432/dossier
      - REDIS_URL=redis://redis:6379
      - FRAPPE_URL=${FRAPPE_URL}
      - FRAPPE_API_KEY=${FRAPPE_API_KEY}
      - FRAPPE_API_SECRET=${FRAPPE_API_SECRET}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

  embedding-service:
    build:
      context: ./services/embedding-service
      dockerfile: Dockerfile
    ports:
      - "8002:8002"
    environment:
      - QDRANT_URL=http://qdrant:6333
      - EMBEDDING_MODEL=all-MiniLM-L6-v2
      - BATCH_SIZE=32
    depends_on:
      qdrant:
        condition: service_healthy
    restart: unless-stopped

  query-service:
    build:
      context: ./services/query-service
      dockerfile: Dockerfile
    ports:
      - "8003:8003"
    environment:
      - DATABASE_URL=postgresql://dossier:${POSTGRES_PASSWORD:-dossier123}@postgres:5432/dossier
      - QDRANT_URL=http://qdrant:6333
      - EMBEDDING_MODEL=all-MiniLM-L6-v2
    depends_on:
      postgres:
        condition: service_healthy
      qdrant:
        condition: service_healthy
    restart: unless-stopped

  ollama:
    image: ollama/ollama:latest
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    environment:
      - OLLAMA_HOST=0.0.0.0
    restart: unless-stopped

  llm-service:
    build:
      context: ./services/llm-service
      dockerfile: Dockerfile
    ports:
      - "8004:8004"
    environment:
      - OLLAMA_URL=http://ollama:11434
      - DEFAULT_MODEL=${DEFAULT_MODEL:-llama2}
    depends_on:
      - ollama
    restart: unless-stopped

  frontend:
    build:
      context: ./services/frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    depends_on:
      - query-service
    restart: unless-stopped

volumes:
  redis_data:
  postgres_data:
  qdrant_data:
  ollama_data:
